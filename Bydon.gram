grammar Bydon
{
	options
    {
        // The Axiom option specifies the top rule for the grammar.
		Axiom = "program";
        // The Separator option specifies the separator terminal (usually white space).
        Separator = "SEPARATOR";
    }
    terminals
    {
        WHITE_SPACE -> U+0020 | U+0009 | U+000B | U+000C | '\r\n';
        SEPARATOR -> WHITE_SPACE+;
		
        NUMBER -> ([1-9A-V] [0-9A-V]* | '0') ;
		VARIABLE -> [a-z'_'][0-9a-zA-Z'_']* ;
		
		TINY -> 'tiny' | 'tin' | 'ti' | 't';
		SMALL -> 'small' | 'smal' | 'sma' | 'sm';
		NORMAL -> 'normal' | 'norma' | 'norm' | 'nor' | 'no' | 'n';
		BIG -> 'big' | 'bi' | 'b';
		FIELD -> 'field' | 'fiel' | 'fie' | 'fi' | 'f';
		
		DO -> 'do' | 'd';
		UNTIL -> 'until' | 'unti' | 'unt' | 'un' | 'u';
		CHECK -> 'check' | 'chec' | 'che' | 'ch';
		
		GO -> 'go' | 'g';
		RL -> 'rl';
		RR -> 'rr';
		SONAR -> 'sonar' | 'sona' | 'son' | 'so';
		COMPASS -> 'compass' | 'compas' | 'compa' | 'comp' | 'com' | 'co';
		
		PRINT -> 'print';
		
		RETURN -> 'return' | 'retur' | 'retu' | 'ret' | 're';
		
    }
    
    rules
    {
		function_call -> VARIABLE function_call_args;
		
		
        exp_atom -> NUMBER^
					| VARIABLE^
                    | exp_bracket^
					| function_call^
					| SONAR^ | GO^ | COMPASS^| RR^ | RL^;

		exp_resatom -> '-'^ exp_atom
					| '+'^ exp_atom
					| exp_atom^;
					
        exp_factor -> exp_resatom^
                    | exp_factor '*'^ exp_resatom
                    | exp_factor '/'^ exp_resatom ;

        exp_term -> exp_factor^
                    | exp_term '+'^ exp_factor
                    | exp_term '-'^ exp_factor ;
		
		exp_compare -> exp_term ^
					| exp_compare '<'^ exp_term
					| exp_compare '>'^ exp_term
					| exp_compare '<='^ exp_term
					| exp_compare '>='^ exp_term
					| exp_compare '='^ exp_term
					| exp_compare '<>'^ exp_term;	
		exp_assign_right -> exp_compare^
					| exp_compare '>>'! exp_compare;
		exp_assign_left -> exp_assign_right^
					| exp_assign_right '<<'! exp_assign_right;
		
		exp -> exp_assign_left^ | function_call^;	
		exp_bracket -> '('! exp^ ')'!;
		
		variable_init -> variable_type VARIABLE+ '<<'! exp;
		
		//variable_assign_right -> exp_atom '>>'! (VARIABLE | variable);
		//variable_assign_left -> VARIABLE  '<<'! exp;

		//variable -> variable_assign_left^ | variable_assign_right^;
		
		function_call_args -> '('! (exp_atom*) ')'! | exp_bracket;
		
		variable_type -> TINY^ | SMALL^ | NORMAL^ | BIG^ | FIELD^;	
		
					
		statement -> RETURN^ exp | exp ^ | variable_init^ | PRINT^ exp | check^ | until^;
						
		statement_list -> (statement ','!)* statement '.'!;
		
		parametre -> variable_init^;
		
		function_parametres -> '('! parametre* ')'!;
		
		function_define -> variable_type VARIABLE function_parametres '<<'! exp_resatom statement_list;	
		check -> CHECK! exp DO! statement_list;
		until -> UNTIL! exp DO! statement_list;
		
		program -> (function_define+);
    }
}